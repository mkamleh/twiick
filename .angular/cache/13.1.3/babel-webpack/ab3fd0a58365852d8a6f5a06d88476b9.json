{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { BehaviorSubject, Subject } from 'rxjs';\nimport { take, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../menu-service.service\";\nimport * as i2 from \"@ionic/angular\";\nimport * as i3 from \"../auth.service\";\nimport * as i4 from \"@angular/common/http\";\nexport let ShoppingCartService = /*#__PURE__*/(() => {\n  class ShoppingCartService {\n    constructor(menuService, toastController, AuthService, httpService) {\n      this.menuService = menuService;\n      this.toastController = toastController;\n      this.AuthService = AuthService;\n      this.httpService = httpService; //shoppingCartnew: shoppingCart = { cartId: 'abc', userId:'232', status: 'notCompleted',\n      //completedOn:null, product: this.products};\n      // shoppingCartTable: shoppingCart [] = [{ cartId: '3234', userId:'abc', status: 'notCompleted',\n      // completedOn:null, product: this.products},\n      // { cartId: '3244', userId:'rtf', status: 'notCompleted',\n      // completedOn:null, product: this.products}];\n\n      this.currentShoppingCart = {\n        cartId: 'ttt',\n        userId: 'rrr',\n        status: 'ggg',\n        completedOn: 'ff',\n        userIdWithStatus: 'tt',\n        product: [],\n        location: null\n      };\n      this.thereIsAlreadyOpenCart = false; //userId = this.AuthService.userId;\n\n      this.userId = null;\n      this.userIdsubscribtion = this.AuthService.userId.subscribe(resdata => {\n        this.userId = resdata;\n      });\n      this.subscription = this.menuService.getLangugue().subscribe(data => {\n        this.langugue = data;\n      });\n      this._shoppingCart = new BehaviorSubject(null);\n      this.observablerFiredOnNewOrderSubmittion = new Subject();\n    }\n\n    get shoppingCart() {\n      return this._shoppingCart.asObservable();\n    }\n\n    calculateTotalForShoppingCart() {\n      let total = 0;\n      this.shoppingCart.subscribe(shoppingCart => {\n        if (shoppingCart === null) {\n          return total;\n        }\n\n        let products = shoppingCart.product;\n\n        for (const Key in products) {\n          const sum = products[Key].price * +products[Key].catagory;\n          total = total + sum;\n        }\n      });\n      return total;\n    }\n\n    addItemToCart(userId, product, quantity) {\n      if (product.discount == true) {\n        product.price = product.discountPrice;\n      } //check if there is opencart if yes return it else create new cart\n      //update database\n\n\n      if (this.thereIsAlreadyOpenCart) {\n        //console.log('retriving old shopping cart from application')\n        return this.shoppingCart.pipe(take(1), tap(shoppingCart => {\n          //product.catagory= quantity.toString();\n          if (shoppingCart.product.some(pro => pro.id === product.id)) {\n            const int = shoppingCart.product.findIndex(pro => pro.id === product.id);\n\n            if (+shoppingCart.product[int].catagory + quantity > 2 && product.quaLeft) {\n              //console.log(\"to much orders 1\");\n              this.presentToastTwoMuch();\n            } else {\n              this.presentToast();\n              shoppingCart.product[int].catagory = (+shoppingCart.product[int].catagory + quantity).toString();\n            } //console.log(\"old 1\");\n\n          } else {\n            //console.log(\"new 1\");\n            if (!product.quaLeft) {\n              this.presentToast();\n              product.catagory = quantity.toString();\n              shoppingCart.product = shoppingCart.product.concat(product);\n            } else {\n              if (quantity < 3) {\n                this.presentToast();\n                product.catagory = quantity.toString();\n                shoppingCart.product = shoppingCart.product.concat(product);\n              } else {\n                this.presentToastTwoMuch();\n              }\n            }\n          } //console.log(shoppingCart.product);\n\n\n          this._shoppingCart.next(shoppingCart);\n\n          this.httpService.put(`https://twiick-default-rtdb.firebaseio.com/shoppingCart/${shoppingCart.cartId}.json`, this.currentShoppingCart).subscribe();\n        }));\n      } else {\n        //console.log(\"222\");\n        //console.log('no open cart found in appliaction will start searchin database')\n        const test = this.userId + '_' + 'notCompleted';\n        return this.httpService.get(`https://twiick-default-rtdb.firebaseio.com/shoppingCart.json?orderBy=\"userIdWithStatus\"&equalTo=\"${test}\"&print=pretty`).pipe(take(1), tap(data => {\n          //console.log(data);\n          //for (const key in data){\n          if (Object.keys(data).length === 0) {\n            this.currentShoppingCart.product = []; //console.log('no opencart found in database will create new one')\n\n            product.catagory = quantity.toString();\n            this.currentShoppingCart.userId = this.userId;\n            this.currentShoppingCart.completedOn = null;\n            this.currentShoppingCart.status = \"notCompleted\";\n            this.currentShoppingCart.userIdWithStatus = this.userId + \"_\" + \"notCompleted\";\n            this.currentShoppingCart.cartId = null;\n\n            if (quantity < 3) {\n              this.currentShoppingCart.product.push(product);\n              this.presentToast();\n            } else {\n              if (!product.quaLeft) {\n                this.currentShoppingCart.product.push(product);\n                this.presentToast();\n              } else {\n                this.presentToastTwoMuch();\n              }\n            } //this.currentShoppingCart.product.push(product);\n            //console.log( 'new', this.currentShoppingCart);\n\n\n            this.thereIsAlreadyOpenCart = true;\n            this.httpService.post('https://twiick-default-rtdb.firebaseio.com/shoppingCart.json', this.currentShoppingCart).subscribe(data => {\n              //for(const key in data){\n              this.currentShoppingCart.cartId = data.name; //console.log(data, data.name,\"test\");\n              //}\n\n              this._shoppingCart.next(this.currentShoppingCart);\n            });\n          } else {\n            //console.log('opencart foound in database')\n            this.thereIsAlreadyOpenCart = true;\n\n            for (const key in data) {\n              if (data[key].product.some(pro => pro.id === product.id)) {\n                const int = data[key].product.findIndex(pro => pro.id === product.id);\n\n                if (+data[key].product[int].catagory + quantity > 2 && product.quaLeft) {\n                  this.presentToastTwoMuch();\n                } else {\n                  data[key].product[int].catagory = (+data[key].product[int].catagory + quantity).toString();\n                  this.presentToast(); //console.log(\"old 2\", data[key].product[int].catagory);\n                }\n              } else {\n                //console.log(\"new 2\");\n                product.catagory = quantity.toString();\n\n                if (+quantity > 2 && product.quaLeft) {\n                  this.presentToastTwoMuch();\n                } else {\n                  this.presentToast();\n                  data[key].product = data[key].product.concat(product);\n                }\n              }\n\n              this.currentShoppingCart.userId = data[key].userId;\n              this.currentShoppingCart.completedOn = data[key].completedOn;\n              this.currentShoppingCart.status = \"notCompleted\";\n              this.currentShoppingCart.userIdWithStatus = data[key].userId + \"_\" + \"notCompleted\";\n              this.currentShoppingCart.cartId = key;\n              this.currentShoppingCart.product = data[key].product; //console.log(\"old\", this.currentShoppingCart);\n\n              this._shoppingCart.next(this.currentShoppingCart);\n\n              this.httpService.put(`https://twiick-default-rtdb.firebaseio.com/shoppingCart/${key}.json`, this.currentShoppingCart).subscribe();\n            }\n          }\n        }));\n      }\n    }\n\n    gettingAllOrders() {\n      //console.log(this.userId,\"from gettingallorders\");\n      const test = this.userId + '_' + 'completed';\n      return this.httpService.get(`https://twiick-default-rtdb.firebaseio.com/shoppingCart.json?orderBy=\"userIdWithStatus\"&equalTo=\"${test}\"&print=pretty`).pipe(take(1));\n    }\n\n    presentToast() {\n      return __awaiter(this, void 0, void 0, function* () {\n        let text;\n\n        if (!this.langugue) {\n          text = 'Item added to cart.';\n        } else {\n          text = \"تم اضافة المنتج الى السلة\";\n        }\n\n        const toast = yield this.toastController.create({\n          message: text,\n          duration: 1000\n        });\n        toast.present();\n      });\n    }\n\n    presentToastTwoMuch() {\n      return __awaiter(this, void 0, void 0, function* () {\n        let text;\n\n        if (this.langugue) {\n          text = 'الحد الاقصي حبتين للمنجات تحت العرض';\n        } else {\n          text = \"Maximum of two pieces are allowed from items under promotion\";\n        }\n\n        const toast = yield this.toastController.create({\n          message: text,\n          duration: 1000\n        });\n        toast.present();\n      });\n    }\n\n    gettingAllOrdersForUs() {\n      //console.log(this.userId,\"from gettingallorders\");\n      const test = this.userId + '_' + 'completed';\n      return this.httpService.get(\"https://twiick-default-rtdb.firebaseio.com/ordersPlaced.json\").pipe(take(1));\n    }\n\n    getOrderById(id) {\n      return this.httpService.get(`https://twiick-default-rtdb.firebaseio.com/shoppingCart/${id}.json`).pipe(take(1));\n    }\n\n    getOrderByIdForUs(id) {\n      return this.httpService.get(`https://twiick-default-rtdb.firebaseio.com/ordersPlaced/${id}.json`).pipe(take(1));\n    }\n\n    updateStatues(myOrder, statusForCustomer, completedOnBeforeSplit) {\n      myOrder.status = statusForCustomer;\n      myOrder.completedOn = completedOnBeforeSplit;\n      console.log(myOrder);\n      return this.httpService.put(`https://twiick-default-rtdb.firebaseio.com/ordersPlaced/${myOrder.cartId}.json`, myOrder).pipe(take(1));\n      ;\n    }\n\n    updateStatuesForCustomer(myOrder, statusForCustomer) {\n      return this.httpService.patch(`https://twiick-default-rtdb.firebaseio.com/shoppingCart/${myOrder.cartId}.json`, {\n        status: statusForCustomer\n      }).pipe(take(1));\n      ;\n    }\n\n    clearShoppingCart() {\n      this._shoppingCart.next(null);\n\n      this.thereIsAlreadyOpenCart = false;\n    }\n\n    itiateShoppinintgCart() {\n      let userId = null;\n      this.AuthService.userId.subscribe(data => {\n        userId = data;\n      }); //console.log(\"222\");\n      //console.log('no open cart found in appliaction will start searchin database')\n\n      const test = this.userId + '_' + 'notCompleted';\n      return this.httpService.get(`https://twiick-default-rtdb.firebaseio.com/shoppingCart.json?orderBy=\"userIdWithStatus\"&equalTo=\"${test}\"&print=pretty`).pipe(take(1), tap(data => {\n        //console.log(data);\n        //for (const key in data){\n        if (Object.keys(data).length === 0) {//console.log('no opencart found in database will create new one')\n        } else {\n          //console.log('opencart foound in database')\n          this.thereIsAlreadyOpenCart = true;\n\n          for (const key in data) {\n            this.currentShoppingCart.userId = data[key].userId;\n            this.currentShoppingCart.completedOn = data[key].completedOn;\n            this.currentShoppingCart.status = \"notCompleted\";\n            this.currentShoppingCart.userIdWithStatus = data[key].userId + \"_\" + \"notCompleted\";\n            this.currentShoppingCart.cartId = key;\n            this.currentShoppingCart.product = data[key].product; //console.log(\"old\", this.currentShoppingCart);\n\n            this._shoppingCart.next(this.currentShoppingCart);\n          }\n        }\n      }));\n    }\n\n    updateCart(id, newQuantity) {\n      return this.shoppingCart.pipe(take(1), tap(shoppingCart => {\n        //product.catagory= quantity.toString();\n        if (+newQuantity === 0) {\n          //console.log(\"zero\");\n          shoppingCart.product.splice(id, 1);\n        } else {\n          if (+newQuantity > 2 && shoppingCart.product[id].quaLeft) {\n            this.presentToastTwoMuch();\n          } else {\n            shoppingCart.product[id].catagory = newQuantity;\n          } //console.log(\"reduce\");\n          //product[id].catagory= quantity.toString();\n\n        } //console.log(shoppingCart.product);\n\n\n        this._shoppingCart.next(shoppingCart);\n\n        this.httpService.put(`https://twiick-default-rtdb.firebaseio.com/shoppingCart/${shoppingCart.cartId}.json`, this.currentShoppingCart).subscribe();\n      }));\n    }\n\n    ChangeDeliveryStatus(status) {\n      return this.shoppingCart.pipe(take(1), tap(shoppingCart => {\n        //product.catagory= quantity.toString();\n        shoppingCart.deliveryAdded = status;\n\n        this._shoppingCart.next(shoppingCart);\n\n        this.httpService.put(`https://twiick-default-rtdb.firebaseio.com/shoppingCart/${shoppingCart.cartId}.json`, this.currentShoppingCart).subscribe();\n      }));\n    }\n\n  }\n\n  ShoppingCartService.ɵfac = function ShoppingCartService_Factory(t) {\n    return new (t || ShoppingCartService)(i0.ɵɵinject(i1.MenuServiceService), i0.ɵɵinject(i2.ToastController), i0.ɵɵinject(i3.AuthService), i0.ɵɵinject(i4.HttpClient));\n  };\n\n  ShoppingCartService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ShoppingCartService,\n    factory: ShoppingCartService.ɵfac,\n    providedIn: 'root'\n  });\n  return ShoppingCartService;\n})();","map":null,"metadata":{},"sourceType":"module"}