{"ast":null,"code":"import { of } from 'rxjs';\nimport { take, tap, switchMap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nimport * as i2 from \"@angular/router\";\nexport let AuthGuard = /*#__PURE__*/(() => {\n  class AuthGuard {\n    constructor(authService, router) {\n      this.authService = authService;\n      this.router = router;\n    }\n\n    canLoad(route, segments) {\n      //console.log(\"inside guaard\");\n      return this.authService.userIsAuthenticated.pipe(take(1), switchMap(isAuthenticated => {\n        if (!isAuthenticated) {\n          //console.log(\"no data in user observable\");\n          return this.authService.autoLogin();\n        } else {\n          //console.log(isAuthenticated);\n          return of(isAuthenticated);\n        }\n      }), tap(isAuthenticated => {\n        if (!isAuthenticated) {\n          this.router.navigateByUrl('/sign-up');\n        }\n      }));\n    }\n\n    canActivate(route, state) {\n      //console.log(\"inside guaard act\");\n      return this.authService.userIsAuthenticated.pipe(take(1), switchMap(isAuthenticated => {\n        if (!isAuthenticated) {\n          //console.log(\"no data in user observableact\");\n          return this.authService.autoLogin();\n        } else {\n          //console.log(isAuthenticated);\n          return of(isAuthenticated);\n        }\n      }), tap(isAuthenticated => {\n        if (!isAuthenticated) {\n          this.router.navigateByUrl('/sign-up');\n        }\n      }));\n    }\n\n  }\n\n  AuthGuard.ɵfac = function AuthGuard_Factory(t) {\n    return new (t || AuthGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n  };\n\n  AuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthGuard,\n    factory: AuthGuard.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthGuard;\n})();","map":null,"metadata":{},"sourceType":"module"}