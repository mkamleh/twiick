{"ast":null,"code":"import { environment } from '../environments/environment';\nimport { BehaviorSubject, from } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { User } from './user.model';\nimport { Plugins } from '@capacitor/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(ngZone, httpClinet, router) {\n      this.ngZone = ngZone;\n      this.httpClinet = httpClinet;\n      this.router = router;\n      this.userIdd = \"2322\";\n      this._user = new BehaviorSubject(null);\n    }\n\n    get userIsAuthenticated() {\n      return this._user.asObservable().pipe(map(user => {\n        if (user) {\n          return !!user.token;\n        } else {\n          return false;\n        }\n      }));\n    }\n\n    createNewUserId() {}\n\n    getuseridd() {\n      return this._user.asObservable();\n    }\n\n    get userId() {\n      return this._user.asObservable().pipe(map(user => {\n        if (user) {\n          return user.id;\n        } else {\n          return null;\n        }\n      }));\n    }\n\n    checkIfAdminOrNot(userId) {\n      return this.httpClinet.get(`https://twiick-default-rtdb.firebaseio.com/users/${userId}/role.json`).pipe(map(role => {\n        //console.log(role,\"role\");\n        if (role === \"admin\") {\n          return true;\n        } else {\n          return false;\n        }\n      }));\n    } // getUserId(){\n    //   return this.userIdd;\n    // }\n\n\n    autoLogin() {\n      return from(Plugins.Storage.get({\n        key: 'authData'\n      })).pipe(map(storedData => {\n        if (!storedData || !storedData.value) {\n          //console.log('nostorage');\n          return null;\n        }\n\n        const parsedData = JSON.parse(storedData.value);\n        const expirationTime = new Date(parsedData.tokenExpirationDate);\n\n        if (expirationTime <= new Date()) {\n          return null;\n        }\n\n        const user = new User(parsedData.userId, parsedData.email, parsedData.token, expirationTime);\n        return user;\n      }), tap(user => {\n        if (user) {\n          this._user.next(user);\n        }\n      }), map(user => {\n        return !!user;\n      }));\n    }\n\n    signup(email, password) {\n      return this.httpClinet.post(`https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=${environment.firebaseAPIkey}`, {\n        email: email,\n        password: password,\n        returnSecureToken: true\n      }).pipe(tap(this.setUserData.bind(this)));\n    }\n\n    login(email, password) {\n      return this.httpClinet.post(`https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=${environment.firebaseAPIkey}`, {\n        email: email,\n        password: password,\n        returnSecureToken: true\n      }).pipe(tap(this.setUserData.bind(this)));\n      ;\n    }\n\n    logout() {\n      this._user.next(null);\n\n      Plugins.Storage.remove({\n        key: 'authData'\n      });\n      this.ngZone.run(() => this.router.navigateByUrl('/'));\n    }\n\n    addUserToMyDatabase(id, name, number, email) {\n      return this.httpClinet.put(`https://twiick-default-rtdb.firebaseio.com/users/${id}.json`, {\n        name: name,\n        number: number,\n        id: id,\n        role: \"customer\",\n        email: email\n      });\n    }\n\n    setUserData(userData) {\n      const expirationTime = new Date(new Date().getTime() + +userData.expiresIn * 1000);\n\n      this._user.next(new User(userData.localId, userData.email, userData.idToken, expirationTime));\n\n      this.storeAuthData(userData.localId, userData.idToken, expirationTime.toISOString(), userData.email);\n    }\n\n    storeAuthData(userId, token, tokenExpirationDate, email) {\n      const data = JSON.stringify({\n        userId: userId,\n        token: token,\n        tokenExpirationDate: tokenExpirationDate,\n        email: email\n      });\n      Plugins.Storage.set({\n        key: 'authData',\n        value: data\n      });\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}