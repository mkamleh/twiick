{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport { Capacitor, Plugins } from '@capacitor/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/menu-service.service\";\nimport * as i2 from \"@ionic/angular\";\nconst _c0 = [\"map\"];\nexport let MapModalComponent = /*#__PURE__*/(() => {\n  class MapModalComponent {\n    constructor(menuService, modalCtrl, renderer, alertCtrl) {\n      this.menuService = menuService;\n      this.modalCtrl = modalCtrl;\n      this.renderer = renderer;\n      this.alertCtrl = alertCtrl;\n      this.center = {\n        lat: 31.960790114862544,\n        lng: 35.88106850487131\n      };\n      this.selectable = true;\n      this.closeButtonText = 'Cancel';\n      this.title = 'Pick Location';\n      this.sub = this.menuService.getLangugue().subscribe(data => {\n        this.languge = data;\n      });\n    }\n\n    ngOnInit() {}\n\n    onCancel() {\n      this.modalCtrl.dismiss();\n    }\n\n    showErrorAlert() {\n      if (!this.languge) {\n        this.alertCtrl.create({\n          header: 'Could not fetch location',\n          message: 'Please use the map to pick a location!',\n          buttons: ['Okay']\n        }).then(alertEl => alertEl.present());\n      } else {\n        this.alertCtrl.create({\n          header: 'خطأ في تحديد الموقع',\n          message: 'الرجاء استعمال الخريطة او التأكد من الشبكة!',\n          buttons: ['تم']\n        }).then(alertEl => alertEl.present());\n      }\n    }\n\n    ngAfterViewInit() {\n      this.getGoogleMaps().then(googleMaps => {\n        this.infoWindow = new googleMaps.InfoWindow();\n        this.googleMaps = googleMaps;\n        const mapEl = this.mapElementRef.nativeElement;\n        const map = new googleMaps.Map(mapEl, {\n          center: this.center,\n          zoom: 16\n        });\n\n        if (this.center.lat !== 31.960790114862544) {\n          const marker = new googleMaps.Marker({\n            position: this.center,\n            map: map,\n            title: 'Picked Location'\n          });\n          marker.setMap(map);\n        } // Define the LatLng coordinates for the polygon's path.\n\n\n        const triangleCoords = [{\n          lat: 31.989150649732125,\n          lng: 35.80650329589844\n        }, {\n          lat: 31.949887194679903,\n          lng: 35.815187711171546\n        }, {\n          lat: 31.93494206582934,\n          lng: 35.88619784933588\n        }, {\n          lat: 35.886197849335884,\n          lng: 35.88619784933588\n        }]; // const bermudaTriangle = new googleMaps.Map.polygon({\n        //   paths: triangleCoords,\n        //   strokeColor: \"#FF0000\",\n        //   strokeOpacity: 0.8,\n        //   strokeWeight: 2,\n        //   fillColor: \"#FF0000\",\n        //   fillOpacity: 0.35,\n        // });\n        // bermudaTriangle.setMap(map);\n\n        const locationButton = document.createElement(\"button\");\n\n        if (!this.languge) {\n          locationButton.textContent = \"Pan to Current Location\";\n        } else {\n          locationButton.textContent = \"تحديد الموقع\";\n        }\n\n        locationButton.classList.add(\"custom-map-control-button\");\n        map.controls[googleMaps.ControlPosition.TOP_CENTER].push(locationButton);\n        locationButton.addEventListener(\"click\", () => {\n          if (!Capacitor.isPluginAvailable('Geolocation')) {\n            this.showErrorAlert();\n            return;\n          }\n\n          Plugins.Geolocation.getCurrentPosition({\n            enableHighAccuracy: true,\n            timeout: 80000,\n            maximumAge: 0\n          }).then(geoPosition => {\n            //console.log(geoPosition.coords.accuracy);\n            const coordinates = {\n              lat: geoPosition.coords.latitude,\n              lng: geoPosition.coords.longitude\n            };\n            this.infoWindow.setPosition(coordinates);\n\n            if (!this.languge) {\n              this.infoWindow.setContent(\"Location found.\");\n            } else {\n              this.infoWindow.setContent(\"تم تحديد العنوان.\");\n            }\n\n            this.infoWindow.open(map);\n            map.setCenter(coordinates);\n          }).catch(err => {\n            this.showErrorAlert();\n          }); // Try HTML5 geolocation.\n          // if (navigator.geolocation) {\n          //   navigator.geolocation.getCurrentPosition(\n          //     (position: Position) => {\n          //       const pos = {\n          //         lat: position.coords.latitude,\n          //         lng: position.coords.longitude,\n          //       };\n          //       this.infoWindow.setPosition(pos);\n          //       this.infoWindow.setContent(\"Location found.\");\n          //       this.infoWindow.open(map);\n          //       map.setCenter(pos);\n          //     },\n          //     () => {\n          //       // handleLocationError(true, infoWindow, map.getCenter()!);\n          //     }\n          //   );\n          // } else {\n          //   // Browser doesn't support Geolocation\n          //   console.log(\"error\");\n          // }\n        });\n        this.googleMaps.event.addListenerOnce(map, 'idle', () => {\n          this.renderer.addClass(mapEl, 'visible');\n        });\n\n        if (this.selectable) {\n          this.clickListener = map.addListener('click', event => {\n            const selectedCoords = {\n              lat: event.latLng.lat(),\n              lng: event.latLng.lng()\n            };\n            this.modalCtrl.dismiss(selectedCoords);\n          });\n        } else {\n          const marker = new googleMaps.Marker({\n            position: this.center,\n            map: map,\n            title: 'Picked Location'\n          });\n          marker.setMap(map);\n        }\n      }).catch(err => {//console.log(err);\n      });\n    } //  handleLocationError(\n    //   browserHasGeolocation: boolean,\n    //   infoWindow: this.googleMaps.InfoWindow,\n    //   pos: google.maps.LatLng\n    // ) {\n    //   infoWindow.setPosition(pos);\n    //   infoWindow.setContent(\n    //     browserHasGeolocation\n    //       ? \"Error: The Geolocation service failed.\"\n    //       : \"Error: Your browser doesn't support geolocation.\"\n    //   );\n    //   infoWindow.open(map);\n    // }\n\n\n    getGoogleMaps() {\n      const win = window;\n      const googleModule = win.google;\n\n      if (googleModule && googleModule.maps) {\n        return Promise.resolve(googleModule.maps);\n      }\n\n      return new Promise((resolve, reject) => {\n        const script = document.createElement('script');\n        script.src = 'https://maps.googleapis.com/maps/api/js?key=' + environment.googleMapsAPIKey;\n        script.async = true;\n        script.defer = true;\n        document.body.appendChild(script);\n\n        script.onload = () => {\n          const loadedGoogleModule = win.google;\n\n          if (loadedGoogleModule && loadedGoogleModule.maps) {\n            resolve(loadedGoogleModule.maps);\n          } else {\n            reject('Google maps SDK not available.');\n          }\n        };\n      });\n    }\n\n    ngOnDestroy() {\n      if (this.clickListener) {\n        this.googleMaps.event.removeListener(this.clickListener);\n      }\n    }\n\n  }\n\n  MapModalComponent.ɵfac = function MapModalComponent_Factory(t) {\n    return new (t || MapModalComponent)(i0.ɵɵdirectiveInject(i1.MenuServiceService), i0.ɵɵdirectiveInject(i2.ModalController), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i2.AlertController));\n  };\n\n  MapModalComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: MapModalComponent,\n    selectors: [[\"app-map-modal\"]],\n    viewQuery: function MapModalComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.mapElementRef = _t.first);\n      }\n    },\n    inputs: {\n      center: \"center\",\n      selectable: \"selectable\",\n      closeButtonText: \"closeButtonText\",\n      title: \"title\"\n    },\n    decls: 12,\n    vars: 0,\n    consts: [[\"slot\", \"primary\"], [3, \"click\"], [1, \"map\"], [\"map\", \"\"], [1, \"locateDiv\"]],\n    template: function MapModalComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ion-header\");\n        i0.ɵɵelementStart(1, \"ion-toolbar\");\n        i0.ɵɵelementStart(2, \"ion-title\");\n        i0.ɵɵtext(3, \"pick location\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"ion-buttons\", 0);\n        i0.ɵɵelementStart(5, \"ion-button\", 1);\n        i0.ɵɵlistener(\"click\", function MapModalComponent_Template_ion_button_click_5_listener() {\n          return ctx.onCancel();\n        });\n        i0.ɵɵtext(6, \"cancel\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"ion-content\");\n        i0.ɵɵelementStart(8, \"div\", 2, 3);\n        i0.ɵɵelementStart(10, \"div\", 4);\n        i0.ɵɵtext(11, \"hiiiiiiiiiii\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n    },\n    directives: [i2.IonHeader, i2.IonToolbar, i2.IonTitle, i2.IonButtons, i2.IonButton, i2.IonContent],\n    styles: [\".map[_ngcontent-%COMP%]{position:absolute;height:100%;width:100%;background-color:transparent;opacity:0;transition:opacity .15s ease-in}.map.visible[_ngcontent-%COMP%]{opacity:1}.locateDiv[_ngcontent-%COMP%]{z-index:10}.custom-map-control-button[_ngcontent-%COMP%]{-webkit-appearance:button;-moz-appearance:button;appearance:button;background-color:#fff;border:0;border-radius:2px;box-shadow:0 1px 4px -1px #0000004d;cursor:pointer;margin:10px;padding:0 .5em;height:40px;font:400 18px Roboto,Arial,sans-serif;overflow:hidden}.custom-map-control-button[_ngcontent-%COMP%]:hover{background:#ebebeb}.custom-map-control-button[_ngcontent-%COMP%]{position:absolute;top:41px;width:100%;height:50px;font-size:18px;left:0px;background-color:#fff}\"]\n  });\n  return MapModalComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}