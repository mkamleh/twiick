{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { IonicNativePlugin, cordova, cordovaPropertyGet, cordovaPropertySet } from '@ionic-native/core';\nimport * as ɵngcc0 from '@angular/core';\n\nvar LaunchNavigator =\n/** @class */\nfunction (_super) {\n  __extends(LaunchNavigator, _super);\n\n  function LaunchNavigator() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.APP = {\n      USER_SELECT: 'user_select',\n      APPLE_MAPS: 'apple_maps',\n      GOOGLE_MAPS: 'google_maps',\n      WAZE: 'waze',\n      CITYMAPPER: 'citymapper',\n      NAVIGON: 'navigon',\n      TRANSIT_APP: 'transit_app',\n      YANDEX: 'yandex',\n      UBER: 'uber',\n      TOMTOM: 'tomtom',\n      BING_MAPS: 'bing_maps',\n      SYGIC: 'sygic',\n      HERE_MAPS: 'here_maps',\n      MOOVIT: 'moovit'\n    };\n    _this.TRANSPORT_MODE = {\n      DRIVING: 'driving',\n      WALKING: 'walking',\n      BICYCLING: 'bicycling',\n      TRANSIT: 'transit'\n    };\n    return _this;\n  }\n\n  LaunchNavigator.prototype.navigate = function (destination, options) {\n    return cordova(this, \"navigate\", {\n      \"successIndex\": 2,\n      \"errorIndex\": 3\n    }, arguments);\n  };\n\n  LaunchNavigator.prototype.isAppAvailable = function (app) {\n    return cordova(this, \"isAppAvailable\", {}, arguments);\n  };\n\n  LaunchNavigator.prototype.availableApps = function () {\n    return cordova(this, \"availableApps\", {}, arguments);\n  };\n\n  LaunchNavigator.prototype.getAppDisplayName = function (app) {\n    return cordova(this, \"getAppDisplayName\", {\n      \"sync\": true\n    }, arguments);\n  };\n\n  LaunchNavigator.prototype.getAppsForPlatform = function (platform) {\n    return cordova(this, \"getAppsForPlatform\", {\n      \"sync\": true\n    }, arguments);\n  };\n\n  LaunchNavigator.prototype.supportsTransportMode = function (app, platform) {\n    return cordova(this, \"supportsTransportMode\", {\n      \"sync\": true\n    }, arguments);\n  };\n\n  LaunchNavigator.prototype.getTransportModes = function (app, platform) {\n    return cordova(this, \"getTransportModes\", {\n      \"sync\": true\n    }, arguments);\n  };\n\n  LaunchNavigator.prototype.supportsDestName = function (app, platform) {\n    return cordova(this, \"supportsDestName\", {\n      \"sync\": true\n    }, arguments);\n  };\n\n  LaunchNavigator.prototype.supportsStart = function (app, platform) {\n    return cordova(this, \"supportsStart\", {\n      \"sync\": true\n    }, arguments);\n  };\n\n  LaunchNavigator.prototype.supportsStartName = function (app, platform) {\n    return cordova(this, \"supportsStartName\", {\n      \"sync\": true\n    }, arguments);\n  };\n\n  LaunchNavigator.prototype.supportsLaunchMode = function (app, platform) {\n    return cordova(this, \"supportsLaunchMode\", {\n      \"sync\": true\n    }, arguments);\n  };\n\n  LaunchNavigator.prototype.userSelect = function (destination, options) {\n    return cordova(this, \"userSelect\", {\n      \"sync\": true\n    }, arguments);\n  };\n\n  Object.defineProperty(LaunchNavigator.prototype, \"appSelection\", {\n    get: function () {\n      return cordovaPropertyGet(this, \"appSelection\");\n    },\n    set: function (value) {\n      cordovaPropertySet(this, \"appSelection\", value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  LaunchNavigator.pluginName = \"LaunchNavigator\";\n  LaunchNavigator.plugin = \"uk.co.workingedge.phonegap.plugin.launchnavigator\";\n  LaunchNavigator.pluginRef = \"launchnavigator\";\n  LaunchNavigator.repo = \"https://github.com/dpa99c/phonegap-launch-navigator\";\n  LaunchNavigator.platforms = [\"Android\", \"iOS\", \"Windows\", \"Windows Phone 8\"];\n\n  LaunchNavigator.ɵfac = /*@__PURE__*/function () {\n    var ɵLaunchNavigator_BaseFactory;\n    return function LaunchNavigator_Factory(t) {\n      return (ɵLaunchNavigator_BaseFactory || (ɵLaunchNavigator_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(LaunchNavigator)))(t || LaunchNavigator);\n    };\n  }();\n\n  LaunchNavigator.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: LaunchNavigator,\n    factory: function (t) {\n      return LaunchNavigator.ɵfac(t);\n    }\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return LaunchNavigator;\n}(IonicNativePlugin);\n\nexport { LaunchNavigator }; //# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9AaW9uaWMtbmF0aXZlL3BsdWdpbnMvbGF1bmNoLW5hdmlnYXRvci9uZ3gvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxzRUFBdUQsTUFBTSxvQkFBb0IsQ0FBQzs7QUFDekY7QUFHZ0IsSUFtUnFCLG1DQUFpQjtBQUFDO0FBRXZDO0FBR2hCLFFBSkUsU0FBRyxHQUFRO0FBQ2IsWUFBSSxXQUFXLEVBQUUsYUFBYTtBQUM5QixZQUFJLFVBQVUsRUFBRSxZQUFZO0FBQzVCLFlBQUksV0FBVyxFQUFFLGFBQWE7QUFDOUIsWUFBSSxJQUFJLEVBQUUsTUFBTTtBQUNoQixZQUFJLFVBQVUsRUFBRSxZQUFZO0FBQzVCLFlBQUksT0FBTyxFQUFFLFNBQVM7QUFDdEIsWUFBSSxXQUFXLEVBQUUsYUFBYTtBQUM5QixZQUFJLE1BQU0sRUFBRSxRQUFRO0FBQ3BCLFlBQUksSUFBSSxFQUFFLE1BQU07QUFDaEIsWUFBSSxNQUFNLEVBQUUsUUFBUTtBQUNwQixZQUFJLFNBQVMsRUFBRSxXQUFXO0FBQzFCLFlBQUksS0FBSyxFQUFFLE9BQU87QUFDbEIsWUFBSSxTQUFTLEVBQUUsV0FBVztBQUMxQixZQUFJLE1BQU0sRUFBRSxRQUFRO0FBQ3BCLFNBQUcsQ0FBQztBQUNKLFFBQ0Usb0JBQWMsR0FBUTtBQUN4QixZQUFJLE9BQU8sRUFBRSxTQUFTO0FBQ3RCLFlBQUksT0FBTyxFQUFFLFNBQVM7QUFDdEIsWUFBSSxTQUFTLEVBQUUsV0FBVztBQUMxQixZQUFJLE9BQU8sRUFBRSxTQUFTO0FBQ3RCLFNBQUcsQ0FBQztBQUNKO0FBRUE7QUFBTSxJQVlKLGtDQUFRLGFBQUMsV0FBOEIsRUFBRSxPQUFnQztBQUt4QixJQUtqRCx3Q0FBYyxhQUFDLEdBQVc7QUFLUCxJQUluQix1Q0FBYTtBQUtZLElBS3pCLDJDQUFpQixhQUFDLEdBQVc7QUFLYSxJQUsxQyw0Q0FBa0IsYUFBQyxRQUFnQjtBQUtNLElBTXpDLCtDQUFxQixhQUFDLEdBQVcsRUFBRSxRQUFnQjtBQUtOLElBTTdDLDJDQUFpQixhQUFDLEdBQVcsRUFBRSxRQUFnQjtBQU1oQyxJQUlmLDBDQUFnQixhQUFDLEdBQVcsRUFBRSxRQUFnQjtBQUtOLElBTXhDLHVDQUFhLGFBQUMsR0FBVyxFQUFFLFFBQWdCO0FBTS9CLElBSVosMkNBQWlCLGFBQUMsR0FBVyxFQUFFLFFBQWdCO0FBS04sSUFPekMsNENBQWtCLGFBQUMsR0FBVyxFQUFFLFFBQWdCO0FBTWxELElBR0Usb0NBQVUsYUFBQyxXQUE4QixFQUFFLE9BQStCO0FBRWpCLDBCQS9IekQseUNBQVk7QUFBSTtBQUljO0FBQ1I7QUFDbEI7QUFDRjtBQUNFO0FBSU47QUFBa0Y7QUFLakU7QUFDRDttREE3Q2YsVUFBVTs7OzswQkFDTDtBQUFDLDBCQXhSUDtBQUFFLEVBd1JtQyxpQkFBaUI7QUFDckQsU0FEWSxlQUFlO0FBQUkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb3Jkb3ZhLCBDb3Jkb3ZhUHJvcGVydHksIElvbmljTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAaW9uaWMtbmF0aXZlL2NvcmUnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFByb21wdHNPcHRpb25zIHtcbiAgLyoqXG4gICAqIGEgZnVuY3Rpb24gdG8gcGFzcyB0aGUgdXNlcidzIGRlY2lzaW9uIHdoZXRoZXIgdG8gcmVtZW1iZXIgdGhlaXIgY2hvaWNlIG9mIGFwcC5cbiAgICogVGhpcyB3aWxsIGJlIHBhc3NlZCBhIHNpbmdsZSBib29sZWFuIHZhbHVlIGluZGljYXRpbmcgdGhlIHVzZXIncyBkZWNpc2lvbi5cbiAgICogQHBhcmFtIHJlbWVtYmVyQ2hvaWNlXG4gICAqL1xuICBjYWxsYmFjaz86IChyZW1lbWJlckNob2ljZTogYm9vbGVhbikgPT4gdm9pZDtcblxuICAvKipcbiAgICogdGV4dCB0byBkaXNwbGF5IGluIHRoZSBuYXRpdmUgcHJvbXB0IGhlYWRlciBhc2tpbmcgdXNlciB3aGV0aGVyIHRvIHJlbWVtYmVyIHRoZWlyIGNob2ljZS5cbiAgICogRGVmYXVsdHMgdG8gXCJSZW1lbWJlciB5b3VyIGNob2ljZT9cIiBpZiBub3Qgc3BlY2lmaWVkLlxuICAgKi9cbiAgaGVhZGVyVGV4dD86IHN0cmluZztcblxuICAvKipcbiAgICogdGV4dCB0byBkaXNwbGF5IGluIHRoZSBuYXRpdmUgcHJvbXB0IGJvZHkgYXNraW5nIHVzZXIgd2hldGhlciB0byByZW1lbWJlciB0aGVpciBjaG9pY2UuXG4gICAqIERlZmF1bHRzIHRvIFwiVXNlIHRoZSBzYW1lIGFwcCBmb3IgbmF2aWdhdGluZyBuZXh0IHRpbWU/XCIgaWYgbm90IHNwZWNpZmllZC5cbiAgICovXG4gIGJvZHlUZXh0Pzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiB0ZXh0IHRvIGRpc3BsYXkgZm9yIHRoZSBZZXMgYnV0dG9uLlxuICAgKiBEZWZhdWx0cyB0byBcIlllc1wiIGlmIG5vdCBzcGVjaWZpZWQuXG4gICAqL1xuICB5ZXNCdXR0b25UZXh0Pzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiB0ZXh0IHRvIGRpc3BsYXkgZm9yIHRoZSBObyBidXR0b24uXG4gICAqIERlZmF1bHRzIHRvIFwiTm9cIiBpZiBub3Qgc3BlY2lmaWVkLlxuICAgKi9cbiAgbm9CdXR0b25UZXh0Pzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFJlbWVtYmVyQ2hvaWNlT3B0aW9ucyB7XG4gIC8qKlxuICAgKiB3aGV0aGVyIHRvIHJlbWVtYmVyIHVzZXIgY2hvaWNlIG9mIGFwcCBmb3IgbmV4dCB0aW1lLCBpbnN0ZWFkIG9mIGFza2luZyBhZ2FpbiBmb3IgdXNlciBjaG9pY2UuXG4gICAqIGBcInByb21wdFwiYCAtIFByb21wdCB1c2VyIHRvIGRlY2lkZSB3aGV0aGVyIHRvIHJlbWVtYmVyIGNob2ljZS5cbiAgICogIC0gRGVmYXVsdCB2YWx1ZSBpZiB1bnNwZWNpZmllZC5cbiAgICogIC0gSWYgYHByb21wdEZuYCBpcyBkZWZpbmVkLCB0aGlzIHdpbGwgYmUgdXNlZCBmb3IgdXNlciBjb25maXJtYXRpb24uXG4gICAqICAtIE90aGVyd2lzZSAoYnkgZGVmYXVsdCksIGEgbmF0aXZlIGRpYWxvZyB3aWxsIGJlIGRpc3BsYXllZCB0byBhc2sgdXNlci5cbiAgICogYGZhbHNlYCAtIERvIG5vdCByZW1lbWJlciB1c2VyIGNob2ljZS5cbiAgICogYHRydWVgIC0gUmVtZW1iZXIgdXNlciBjaG9pY2UuXG4gICAqL1xuICBlbmFibGVkPzogYm9vbGVhbiB8IHN0cmluZztcblxuICAvKipcbiAgICogYSBmdW5jdGlvbiB3aGljaCBhc2tzIHRoZSB1c2VyIHdoZXRoZXIgdG8gcmVtZW1iZXIgdGhlaXIgY2hvaWNlIG9mIGFwcC5cbiAgICogSWYgdGhpcyBpcyBkZWZpbmVkLCB0aGVuIHRoZSBkZWZhdWx0IGRpYWxvZyBwcm9tcHQgd2lsbCBub3QgYmUgc2hvd24sIGFsbG93aW5nIGZvciBhIGN1c3RvbSBVSSBmb3IgYXNraW5nIHRoZSB1c2VyLlxuICAgKiBUaGlzIHdpbGwgYmUgcGFzc2VkIGEgY2FsbGJhY2sgZnVuY3Rpb24gd2hpY2ggc2hvdWxkIGJlIGludm9rZWQgd2l0aCBhIHNpbmdsZSBib29sZWFuIGFyZ3VtZW50IHdoaWNoIGluZGljYXRlcyB0aGUgdXNlcidzIGRlY2lzaW9uIHRvIHJlbWVtYmVyIHRoZWlyIGNob2ljZS5cbiAgICogQHBhcmFtIGNhbGxiYWNrXG4gICAqL1xuICBwcm9tcHRGbj86IChjYWxsYmFjazogKHJlbWVtYmVyQ2hvaWNlOiBib29sZWFuKSA9PiB2b2lkKSA9PiB2b2lkO1xuXG4gIC8qKlxuICAgKiBvcHRpb25zIHJlbGF0ZWQgdG8gdGhlIGRlZmF1bHQgZGlhbG9nIHByb21wdCB1c2VkIHRvIGFzayB0aGUgdXNlciB3aGV0aGVyIHRvIHJlbWVtYmVyIHRoZWlyIGNob2ljZSBvZiBhcHAuXG4gICAqL1xuICBwcm9tcHQ/OiBQcm9tcHRzT3B0aW9ucztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBBcHBTZWxlY3Rpb25PcHRpb25zIHtcbiAgLyoqXG4gICAqIHRleHQgdG8gZGlzcGxheSBpbiB0aGUgbmF0aXZlIHBpY2tlciB3aGljaCBlbmFibGVzIHVzZXIgdG8gc2VsZWN0IHdoaWNoIG5hdmlnYXRpb24gYXBwIHRvIGxhdW5jaC5cbiAgICogRGVmYXVsdHMgdG8gXCJTZWxlY3QgYXBwIGZvciBuYXZpZ2F0aW9uXCIgaWYgbm90IHNwZWNpZmllZC5cbiAgICovXG4gIGRpYWxvZ0hlYWRlclRleHQ/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIHRleHQgdG8gZGlzcGxheSBmb3IgdGhlIGNhbmNlbCBidXR0b24gaW4gdGhlIG5hdGl2ZSBwaWNrZXIgd2hpY2ggZW5hYmxlcyB1c2VyIHRvIHNlbGVjdCB3aGljaCBuYXZpZ2F0aW9uIGFwcCB0byBsYXVuY2guXG4gICAqIERlZmF1bHRzIHRvIFwiQ2FuY2VsXCIgaWYgbm90IHNwZWNpZmllZC5cbiAgICovXG4gIGNhbmNlbEJ1dHRvblRleHQ/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIExpc3Qgb2YgYXBwcywgZGVmaW5lZCBhcyBgbGF1bmNobmF2aWdhdG9yLkFQUGAgY29uc3RhbnRzLCB3aGljaCBzaG91bGQgYmUgZGlzcGxheWVkIGluIHRoZSBwaWNrZXIgaWYgdGhlIGFwcCBpcyBhdmFpbGFibGUuXG4gICAqIFRoaXMgY2FuIGJlIHVzZWQgdG8gcmVzdHJpY3Qgd2hpY2ggYXBwcyBhcmUgZGlzcGxheWVkLCBldmVuIGlmIHRoZXkgYXJlIGluc3RhbGxlZC5cbiAgICogQnkgZGVmYXVsdCwgYWxsIGF2YWlsYWJsZSBhcHBzIHdpbGwgYmUgZGlzcGxheWVkLlxuICAgKi9cbiAgbGlzdD86IHN0cmluZ1tdO1xuXG4gIC8qKlxuICAgKiBDYWxsYmFjayB0byBpbnZva2Ugd2hlbiB0aGUgdXNlciBzZWxlY3RzIGFuIGFwcCBpbiB0aGUgbmF0aXZlIHBpY2tlci5cbiAgICogQSBzaW5nbGUgc3RyaW5nIGFyZ3VtZW50IGlzIHBhc3NlZCB3aGljaCBpcyB0aGUgYXBwIHdoYXQgd2FzIHNlbGVjdGVkIGRlZmluZWQgYXMgYSBgbGF1bmNobmF2aWdhdG9yLkFQUGAgY29uc3RhbnQuXG4gICAqL1xuICBjYWxsYmFjaz86IChhcHA6IHN0cmluZykgPT4gdm9pZDtcblxuICAvKipcbiAgICogKEFuZHJvaWQgb25seSkgbmF0aXZlIHBpY2tlciB0aGVtZS4gU3BlY2lmeSB1c2luZyBgYWN0aW9uc2hlZXQuQU5EUk9JRF9USEVNRVNgIGNvbnN0YW50cy5cbiAgICogRGVmYXVsdCBgYWN0aW9uc2hlZXQuQU5EUk9JRF9USEVNRVMuVEhFTUVfSE9MT19MSUdIVGBcbiAgICovXG4gIGFuZHJvaWRUaGVtZT86IG51bWJlcjtcblxuICAvKipcbiAgICogb3B0aW9ucyByZWxhdGVkIHRvIHdoZXRoZXIgdG8gcmVtZW1iZXIgdXNlciBjaG9pY2Ugb2YgYXBwIGZvciBuZXh0IHRpbWUsIGluc3RlYWQgb2YgYXNraW5nIGFnYWluIGZvciB1c2VyIGNob2ljZS5cbiAgICovXG4gIHJlbWVtYmVyQ2hvaWNlPzogUmVtZW1iZXJDaG9pY2VPcHRpb25zO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIExhdW5jaE5hdmlnYXRvck9wdGlvbnMge1xuICAvKipcbiAgICogQSBjYWxsYmFjayB0byBpbnZva2Ugd2hlbiB0aGUgbmF2aWdhdGlvbiBhcHAgaXMgc3VjY2Vzc2Z1bGx5IGxhdW5jaGVkLlxuICAgKi9cbiAgc3VjY2Vzc0NhbGxiYWNrPzogRnVuY3Rpb247XG5cbiAgLyoqXG4gICAqIEEgY2FsbGJhY2sgdG8gaW52b2tlIGlmIGFuIGVycm9yIGlzIGVuY291bnRlcmVkIHdoaWxlIGxhdW5jaGluZyB0aGUgYXBwLlxuICAgKiBBIHNpbmdsZSBzdHJpbmcgYXJndW1lbnQgY29udGFpbmluZyB0aGUgZXJyb3IgbWVzc2FnZSB3aWxsIGJlIHBhc3NlZCBpbi5cbiAgICovXG4gIGVycm9yQ2FsbGJhY2s/OiAoZXJyb3I6IHN0cmluZykgPT4gdm9pZDtcblxuICAvKipcbiAgICogbmFtZSBvZiB0aGUgbmF2aWdhdGlvbiBhcHAgdG8gdXNlIGZvciBkaXJlY3Rpb25zLlxuICAgKiBTcGVjaWZ5IHVzaW5nIGxhdW5jaG5hdmlnYXRvci5BUFAgY29uc3RhbnRzLlxuICAgKiBlLmcuIGBsYXVuY2huYXZpZ2F0b3IuQVBQLkdPT0dMRV9NQVBTYC5cbiAgICogSWYgbm90IHNwZWNpZmllZCwgZGVmYXVsdHMgdG8gVXNlciBTZWxlY3Rpb24uXG4gICAqL1xuICBhcHA/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIG5pY2tuYW1lIHRvIGRpc3BsYXkgaW4gYXBwIGZvciBkZXN0aW5hdGlvbi4gZS5nLiBcIkJvYidzIEhvdXNlXCIuXG4gICAqL1xuICBkZXN0aW5hdGlvbk5hbWU/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFN0YXJ0IHBvaW50IG9mIHRoZSBuYXZpZ2F0aW9uLlxuICAgKiBJZiBub3Qgc3BlY2lmaWVkLCB0aGUgY3VycmVudCBkZXZpY2UgbG9jYXRpb24gd2lsbCBiZSB1c2VkLlxuICAgKiBFaXRoZXI6XG4gICAqICAtIGEge3N0cmluZ30gY29udGFpbmluZyB0aGUgYWRkcmVzcy4gZS5nLiBcIkJ1Y2tpbmdoYW0gUGFsYWNlLCBMb25kb25cIlxuICAgKiAgLSBhIHtzdHJpbmd9IGNvbnRhaW5pbmcgYSBsYXRpdHVkZS9sb25naXR1ZGUgY29vcmRpbmF0ZS4gZS5nLiBcIjUwLjEuIC00LjBcIlxuICAgKiAgLSBhbiB7YXJyYXl9LCB3aGVyZSB0aGUgZmlyc3QgZWxlbWVudCBpcyB0aGUgbGF0aXR1ZGUgYW5kIHRoZSBzZWNvbmQgZWxlbWVudCBpcyBhIGxvbmdpdHVkZSwgYXMgZGVjaW1hbCBudW1iZXJzLiBlLmcuIFs1MC4xLCAtNC4wXVxuICAgKi9cbiAgc3RhcnQ/OiBzdHJpbmcgfCBudW1iZXJbXTtcblxuICAvKipcbiAgICogbmlja25hbWUgdG8gZGlzcGxheSBpbiBhcHAgZm9yIHN0YXJ0IC4gZS5nLiBcIk15IEhvdXNlXCIuXG4gICAqL1xuICBzdGFydE5hbWU/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRyYW5zcG9ydGF0aW9uIG1vZGUgZm9yIG5hdmlnYXRpb246IFwiZHJpdmluZ1wiLCBcIndhbGtpbmdcIiBvciBcInRyYW5zaXRcIi4gRGVmYXVsdHMgdG8gXCJkcml2aW5nXCIgaWYgbm90IHNwZWNpZmllZC5cbiAgICovXG4gIHRyYW5zcG9ydE1vZGU/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIElmIHRydWUsIGRlYnVnIGxvZyBvdXRwdXQgd2lsbCBiZSBnZW5lcmF0ZWQgYnkgdGhlIHBsdWdpbi4gRGVmYXVsdHMgdG8gZmFsc2UuXG4gICAqL1xuICBlbmFibGVEZWJ1Zz86IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIGEga2V5L3ZhbHVlIG1hcCBvZiBleHRyYSBhcHAtc3BlY2lmaWMgcGFyYW1ldGVycy4gRm9yIGV4YW1wbGUsIHRvIHRlbGwgR29vZ2xlIE1hcHMgb24gQW5kcm9pZCB0byBkaXNwbGF5IFNhdGVsbGl0ZSB2aWV3IGluIFwibWFwc1wiIGxhdW5jaCBtb2RlOiBge1widFwiOiBcImtcIn1gXG4gICAqL1xuICBleHRyYXM/OiBhbnk7XG5cbiAgLyoqXG4gICAqIChBbmRyb2lkIG9ubHkpIG1vZGUgaW4gd2hpY2ggdG8gb3BlbiBHb29nbGUgTWFwcyBhcHAuXG4gICAqIGBsYXVuY2huYXZpZ2F0b3IuTEFVTkNIX01PREUuTUFQU2Agb3IgYGxhdW5jaG5hdmlnYXRvci5MQVVOQ0hfTU9ERS5UVVJOX0JZX1RVUk5gXG4gICAqIERlZmF1bHRzIHRvIGBsYXVuY2huYXZpZ2F0b3IuTEFVTkNIX01PREUuTUFQU2AgaWYgbm90IHNwZWNpZmllZC5cbiAgICovXG4gIGxhdW5jaE1vZGVHb29nbGVNYXBzPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiAoaU9TIG9ubHkpIG1ldGhvZCB0byB1c2UgdG8gb3BlbiBBcHBsZSBNYXBzIGFwcC5cbiAgICogYGxhdW5jaG5hdmlnYXRvci5MQVVOQ0hfTU9ERS5VUklfU0NIRU1FYCBvciBgbGF1bmNobmF2aWdhdG9yLkxBVU5DSF9NT0RFLk1BUEtJVGBcbiAgICogRGVmYXVsdHMgdG8gYGxhdW5jaG5hdmlnYXRvci5MQVVOQ0hfTU9ERS5VUklfU0NIRU1FYCBpZiBub3Qgc3BlY2lmaWVkLlxuICAgKi9cbiAgbGF1bmNoTW9kZUFwcGxlTWFwcz86IHN0cmluZztcblxuICAvKipcbiAgICogKFdpbmRvd3Mgb25seSkgSWYgZmFsc2UsIHRoZSBwbHVnaW4gd2lsbCBOT1QgYXR0ZW1wdCB0byB1c2UgdGhlIGdlb2xvY2F0aW9uIHBsdWdpbiB0byBkZXRlcm1pbmUgdGhlIGN1cnJlbnQgZGV2aWNlIHBvc2l0aW9uIHdoZW4gdGhlIHN0YXJ0IGxvY2F0aW9uIHBhcmFtZXRlciBpcyBvbWl0dGVkLiBEZWZhdWx0cyB0byB0cnVlLlxuICAgKi9cbiAgZW5hYmxlR2VvbG9jYXRpb24/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiAoQW5kcm9pZCBhbmQgaU9TIG9ubHkpIElmIHRydWUsIGFuZCBpbnB1dCBsb2NhdGlvbiB0eXBlKHMpIGRvZXNuJ3QgbWF0Y2ggdGhvc2UgcmVxdWlyZWQgYnkgdGhlIGFwcCwgdXNlIGdlb2NvZGluZyB0byBvYnRhaW4gdGhlIGFkZHJlc3MvY29vcmRzIGFzIHJlcXVpcmVkLiBEZWZhdWx0cyB0byB0cnVlLlxuICAgKi9cbiAgZW5hYmxlR2VvY29kaW5nPzogYm9vbGVhbjtcblxuICAvKipcbiAgICogb3B0aW9ucyByZWxhdGVkIHRvIHRoZSBkZWZhdWx0IG5hdGl2ZSBhY3Rpb25zaGVldCBwaWNrZXIgd2hpY2ggZW5hYmxlcyB1c2VyIHRvIHNlbGVjdCB3aGljaCBuYXZpZ2F0aW9uIGFwcCB0byBsYXVuY2ggaWYgYGFwcGAgaXMgbm90IHNwZWNpZmllZC5cbiAgICovXG4gIGFwcFNlbGVjdGlvbj86IEFwcFNlbGVjdGlvbk9wdGlvbnM7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVXNlckNob2ljZSB7XG4gIC8qKlxuICAgKiBJbmRpY2F0ZXMgd2hldGhlciBhIHVzZXIgY2hvaWNlIGV4aXN0cyBmb3IgYSBwcmVmZXJyZWQgbmF2aWdhdG9yIGFwcC5cbiAgICogQHBhcmFtIGNhbGxiYWNrIC0gZnVuY3Rpb24gdG8gcGFzcyByZXN1bHQgdG86IHdpbGwgcmVjZWl2ZSBhIGJvb2xlYW4gYXJndW1lbnQuXG4gICAqL1xuICBleGlzdHM6IChjYWxsYmFjazogKGV4aXN0czogYm9vbGVhbikgPT4gdm9pZCkgPT4gdm9pZDtcblxuICAvKipcbiAgICogUmV0dXJucyBjdXJyZW50IHVzZXIgY2hvaWNlIG9mIHByZWZlcnJlZCBuYXZpZ2F0b3IgYXBwLlxuICAgKiBAcGFyYW0gY2FsbGJhY2sgLSBmdW5jdGlvbiB0byBwYXNzIHJlc3VsdCB0bzogd2lsbCByZWNlaXZlIGEgc3RyaW5nIGFyZ3VtZW50IGluZGljYXRpbmcgdGhlIGFwcCwgd2hpY2ggaXMgYSBjb25zdGFudCBpbiBgbGF1bmNobmF2aWdhdG9yLkFQUGAuXG4gICAqL1xuICBnZXQ6IChjYWxsYmFjazogKGFwcDogc3RyaW5nKSA9PiB2b2lkKSA9PiB2b2lkO1xuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBjdXJyZW50IHVzZXIgY2hvaWNlIG9mIHByZWZlcnJlZCBuYXZpZ2F0b3IgYXBwLlxuICAgKiBAcGFyYW0gYXBwIC0gYXBwIHRvIHNldCBhcyBwcmVmZXJyZWQgY2hvaWNlIGFzIGEgY29uc3RhbnQgaW4gYGxhdW5jaG5hdmlnYXRvci5BUFBgLlxuICAgKiBAcGFyYW0gY2FsbGJhY2sgLSBmdW5jdGlvbiB0byBjYWxsIG9uY2Ugb3BlcmF0aW9uIGlzIGNvbXBsZXRlLlxuICAgKi9cbiAgc2V0OiAoYXBwOiBzdHJpbmcsIGNhbGxiYWNrOiAoKSA9PiB2b2lkKSA9PiB2b2lkO1xuXG4gIC8qKlxuICAgKiBDbGVhcnMgdGhlIGN1cnJlbnQgdXNlciBjaG9pY2Ugb2YgcHJlZmVycmVkIG5hdmlnYXRvciBhcHAuXG4gICAqIEBwYXJhbSBjYWxsYmFjayAtIGZ1bmN0aW9uIHRvIGNhbGwgb25jZSBvcGVyYXRpb24gaXMgY29tcGxldGUuXG4gICAqL1xuICBjbGVhcjogKGNhbGxiYWNrOiAoKSA9PiB2b2lkKSA9PiB2b2lkO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFVzZXJQcm9tcHRlZCB7XG4gIC8qKlxuICAgKiBJbmRpY2F0ZXMgd2hldGhlciB1c2VyIGhhcyBhbHJlYWR5IGJlZW4gcHJvbXB0ZWQgd2hldGhlciB0byByZW1lbWJlciB0aGVpciBjaG9pY2UgYSBwcmVmZXJyZWQgbmF2aWdhdG9yIGFwcC5cbiAgICogQHBhcmFtIGNhbGxiYWNrIC0gZnVuY3Rpb24gdG8gcGFzcyByZXN1bHQgdG86IHdpbGwgcmVjZWl2ZSBhIGJvb2xlYW4gYXJndW1lbnQuXG4gICAqL1xuICBnZXQ6IChjYWxsYmFjazogKGV4aXN0czogYm9vbGVhbikgPT4gdm9pZCkgPT4gdm9pZDtcblxuICAvKipcbiAgICogU2V0cyBmbGFnIGluZGljYXRpbmcgdXNlciBoYXMgYWxyZWFkeSBiZWVuIHByb21wdGVkIHdoZXRoZXIgdG8gcmVtZW1iZXIgdGhlaXIgY2hvaWNlIGEgcHJlZmVycmVkIG5hdmlnYXRvciBhcHAuXG4gICAqIEBwYXJhbSBjYWxsYmFjayAtIGZ1bmN0aW9uIHRvIGNhbGwgb25jZSBvcGVyYXRpb24gaXMgY29tcGxldGUuXG4gICAqL1xuICBzZXQ6IChjYWxsYmFjazogKCkgPT4gdm9pZCkgPT4gdm9pZDtcblxuICAvKipcbiAgICogQ2xlYXJzIGZsYWcgd2hpY2ggaW5kaWNhdGVzIGlmIHVzZXIgaGFzIGFscmVhZHkgYmVlbiBwcm9tcHRlZCB3aGV0aGVyIHRvIHJlbWVtYmVyIHRoZWlyIGNob2ljZSBhIHByZWZlcnJlZCBuYXZpZ2F0b3IgYXBwLlxuICAgKiBAcGFyYW0gY2FsbGJhY2sgLSBmdW5jdGlvbiB0byBjYWxsIG9uY2Ugb3BlcmF0aW9uIGlzIGNvbXBsZXRlLlxuICAgKi9cbiAgY2xlYXI6IChjYWxsYmFjazogKCkgPT4gdm9pZCkgPT4gdm9pZDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBBcHBTZWxlY3Rpb24ge1xuICB1c2VyQ2hvaWNlOiBVc2VyQ2hvaWNlO1xuICB1c2VyUHJvbXB0ZWQ6IFVzZXJQcm9tcHRlZDtcbn1cblxuLyoqXG4gKiBAbmFtZSBMYXVuY2ggTmF2aWdhdG9yXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJlcXVpcmVzIENvcmRvdmEgcGx1Z2luOiB1ay5jby53b3JraW5nZWRnZS5waG9uZWdhcC5wbHVnaW4ubGF1bmNobmF2aWdhdG9yLiBGb3IgbW9yZSBpbmZvLCBwbGVhc2Ugc2VlIHRoZSBbTGF1bmNoTmF2aWdhdG9yIHBsdWdpbiBkb2NzXShodHRwczovL2dpdGh1Yi5jb20vZHBhOTljL3Bob25lZ2FwLWxhdW5jaC1uYXZpZ2F0b3IpLlxuICpcbiAqIEB1c2FnZVxuICogUGxlYXNlIHJlZmVyIHRvIHRoZSBwbHVnaW4ncyByZXBvIGZvciBkZXRhaWxlZCB1c2FnZS4gVGhpcyBkb2NzIHBhZ2Ugb25seSBleHBsYWlucyB0aGUgTmF0aXZlIHdyYXBwZXIuXG4gKlxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgTGF1bmNoTmF2aWdhdG9yLCBMYXVuY2hOYXZpZ2F0b3JPcHRpb25zIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9sYXVuY2gtbmF2aWdhdG9yL25neCc7XG4gKlxuICogY29uc3RydWN0b3IocHJpdmF0ZSBsYXVuY2hOYXZpZ2F0b3I6IExhdW5jaE5hdmlnYXRvcikgeyB9XG4gKlxuICogLi4uXG4gKlxuICogbGV0IG9wdGlvbnM6IExhdW5jaE5hdmlnYXRvck9wdGlvbnMgPSB7XG4gKiAgIHN0YXJ0OiAnTG9uZG9uLCBPTicsXG4gKiAgIGFwcDogTGF1bmNoTmF2aWdhdG9yLkFQUFMuVUJFUlxuICogfVxuICpcbiAqIHRoaXMubGF1bmNoTmF2aWdhdG9yLm5hdmlnYXRlKCdUb3JvbnRvLCBPTicsIG9wdGlvbnMpXG4gKiAgIC50aGVuKFxuICogICAgIHN1Y2Nlc3MgPT4gY29uc29sZS5sb2coJ0xhdW5jaGVkIG5hdmlnYXRvcicpLFxuICogICAgIGVycm9yID0+IGNvbnNvbGUubG9nKCdFcnJvciBsYXVuY2hpbmcgbmF2aWdhdG9yJywgZXJyb3IpXG4gKiAgICk7XG4gKiBgYGBcbiAqIEBpbnRlcmZhY2VzXG4gKiBMYXVuY2hOYXZpZ2F0b3JPcHRpb25zXG4gKiBQcm9tcHRzT3B0aW9uc1xuICogUmVtZW1iZXJDaG9pY2VPcHRpb25zXG4gKiBBcHBTZWxlY3Rpb25PcHRpb25zXG4gKiBVc2VyQ2hvaWNlXG4gKiBVc2VyUHJvbXB0ZWRcbiAqIEFwcFNlbGVjdGlvblxuICovXG5AUGx1Z2luKHtcbiAgcGx1Z2luTmFtZTogJ0xhdW5jaE5hdmlnYXRvcicsXG4gIHBsdWdpbjogJ3VrLmNvLndvcmtpbmdlZGdlLnBob25lZ2FwLnBsdWdpbi5sYXVuY2huYXZpZ2F0b3InLFxuICBwbHVnaW5SZWY6ICdsYXVuY2huYXZpZ2F0b3InLFxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL2RwYTk5Yy9waG9uZWdhcC1sYXVuY2gtbmF2aWdhdG9yJyxcbiAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnaU9TJywgJ1dpbmRvd3MnLCAnV2luZG93cyBQaG9uZSA4J10sXG59KVxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIExhdW5jaE5hdmlnYXRvciBleHRlbmRzIElvbmljTmF0aXZlUGx1Z2luIHtcbiAgQVBQOiBhbnkgPSB7XG4gICAgVVNFUl9TRUxFQ1Q6ICd1c2VyX3NlbGVjdCcsXG4gICAgQVBQTEVfTUFQUzogJ2FwcGxlX21hcHMnLFxuICAgIEdPT0dMRV9NQVBTOiAnZ29vZ2xlX21hcHMnLFxuICAgIFdBWkU6ICd3YXplJyxcbiAgICBDSVRZTUFQUEVSOiAnY2l0eW1hcHBlcicsXG4gICAgTkFWSUdPTjogJ25hdmlnb24nLFxuICAgIFRSQU5TSVRfQVBQOiAndHJhbnNpdF9hcHAnLFxuICAgIFlBTkRFWDogJ3lhbmRleCcsXG4gICAgVUJFUjogJ3ViZXInLFxuICAgIFRPTVRPTTogJ3RvbXRvbScsXG4gICAgQklOR19NQVBTOiAnYmluZ19tYXBzJyxcbiAgICBTWUdJQzogJ3N5Z2ljJyxcbiAgICBIRVJFX01BUFM6ICdoZXJlX21hcHMnLFxuICAgIE1PT1ZJVDogJ21vb3ZpdCcsXG4gIH07XG5cbiAgVFJBTlNQT1JUX01PREU6IGFueSA9IHtcbiAgICBEUklWSU5HOiAnZHJpdmluZycsXG4gICAgV0FMS0lORzogJ3dhbGtpbmcnLFxuICAgIEJJQ1lDTElORzogJ2JpY3ljbGluZycsXG4gICAgVFJBTlNJVDogJ3RyYW5zaXQnLFxuICB9O1xuXG4gIEBDb3Jkb3ZhUHJvcGVydHkoKVxuICBhcHBTZWxlY3Rpb246IEFwcFNlbGVjdGlvbjtcblxuICAvKipcbiAgICogTGF1bmNoZXMgbmF2aWdhdG9yIGFwcFxuICAgKiBAcGFyYW0gZGVzdGluYXRpb24ge3N0cmluZ3xudW1iZXJbXX0gTG9jYXRpb24gbmFtZSBvciBjb29yZGluYXRlcyAoYXMgc3RyaW5nIG9yIGFycmF5KVxuICAgKiBAcGFyYW0gb3B0aW9ucyB7TGF1bmNoTmF2aWdhdG9yT3B0aW9uc31cbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBzdWNjZXNzSW5kZXg6IDIsXG4gICAgZXJyb3JJbmRleDogMyxcbiAgfSlcbiAgbmF2aWdhdGUoZGVzdGluYXRpb246IHN0cmluZyB8IG51bWJlcltdLCBvcHRpb25zPzogTGF1bmNoTmF2aWdhdG9yT3B0aW9ucyk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgaWYgdGhlIGdpdmVuIGFwcCBpcyBpbnN0YWxsZWQgYW5kIGF2YWlsYWJsZSBvbiB0aGUgY3VycmVudCBkZXZpY2UuXG4gICAqIEBwYXJhbSBhcHAge3N0cmluZ31cbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgaXNBcHBBdmFpbGFibGUoYXBwOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgbGlzdCBpbmRpY2F0aW5nIHdoaWNoIGFwcHMgYXJlIGluc3RhbGxlZCBhbmQgYXZhaWxhYmxlIG9uIHRoZSBjdXJyZW50IGRldmljZS5cbiAgICogQHJldHVybnMge1Byb21pc2U8c3RyaW5nW10+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBhdmFpbGFibGVBcHBzKCk6IFByb21pc2U8c3RyaW5nW10+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgZGlzcGxheSBuYW1lIG9mIHRoZSBzcGVjaWZpZWQgYXBwLlxuICAgKiBAcGFyYW0gYXBwIHtzdHJpbmd9XG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqL1xuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcbiAgZ2V0QXBwRGlzcGxheU5hbWUoYXBwOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGxpc3Qgb2Ygc3VwcG9ydGVkIGFwcHMgb24gYSBnaXZlbiBwbGF0Zm9ybS5cbiAgICogQHBhcmFtIHBsYXRmb3JtIHtzdHJpbmd9XG4gICAqIEByZXR1cm5zIHtzdHJpbmdbXX1cbiAgICovXG4gIEBDb3Jkb3ZhKHsgc3luYzogdHJ1ZSB9KVxuICBnZXRBcHBzRm9yUGxhdGZvcm0ocGxhdGZvcm06IHN0cmluZyk6IHN0cmluZ1tdIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogSW5kaWNhdGVzIGlmIGFuIGFwcCBvbiBhIGdpdmVuIHBsYXRmb3JtIHN1cHBvcnRzIHNwZWNpZmljYXRpb24gb2YgdHJhbnNwb3J0IG1vZGUuXG4gICAqIEBwYXJhbSBhcHAge3N0cmluZ30gc3BlY2lmaWVkIGFzIGEgc3RyaW5nLCB5b3UgY2FuIHVzZSBvbmUgb2YgdGhlIGNvbnN0YW50cywgZS5nIGBMYXVuY2hOYXZpZ2F0b3IuQVBQLkdPT0dMRV9NQVBTYFxuICAgKiBAcGFyYW0gcGxhdGZvcm0ge3N0cmluZ31cbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcbiAgc3VwcG9ydHNUcmFuc3BvcnRNb2RlKGFwcDogc3RyaW5nLCBwbGF0Zm9ybTogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGxpc3Qgb2YgdHJhbnNwb3J0IG1vZGVzIHN1cHBvcnRlZCBieSBhbiBhcHAgb24gYSBnaXZlbiBwbGF0Zm9ybS5cbiAgICogQHBhcmFtIGFwcCB7c3RyaW5nfVxuICAgKiBAcGFyYW0gcGxhdGZvcm0ge3N0cmluZ31cbiAgICogQHJldHVybnMge3N0cmluZ1tdfVxuICAgKi9cbiAgQENvcmRvdmEoeyBzeW5jOiB0cnVlIH0pXG4gIGdldFRyYW5zcG9ydE1vZGVzKGFwcDogc3RyaW5nLCBwbGF0Zm9ybTogc3RyaW5nKTogc3RyaW5nW10ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0gYXBwIHtzdHJpbmd9XG4gICAqIEBwYXJhbSBwbGF0Zm9ybSB7c3RyaW5nfVxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIEBDb3Jkb3ZhKHsgc3luYzogdHJ1ZSB9KVxuICBzdXBwb3J0c0Rlc3ROYW1lKGFwcDogc3RyaW5nLCBwbGF0Zm9ybTogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIEluZGljYXRlcyBpZiBhbiBhcHAgb24gYSBnaXZlbiBwbGF0Zm9ybSBzdXBwb3J0cyBzcGVjaWZpY2F0aW9uIG9mIHN0YXJ0IGxvY2F0aW9uLlxuICAgKiBAcGFyYW0gYXBwIHtzdHJpbmd9XG4gICAqIEBwYXJhbSBwbGF0Zm9ybSB7c3RyaW5nfVxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIEBDb3Jkb3ZhKHsgc3luYzogdHJ1ZSB9KVxuICBzdXBwb3J0c1N0YXJ0KGFwcDogc3RyaW5nLCBwbGF0Zm9ybTogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSBhcHAge3N0cmluZ31cbiAgICogQHBhcmFtIHBsYXRmb3JtIHtzdHJpbmd9XG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgQENvcmRvdmEoeyBzeW5jOiB0cnVlIH0pXG4gIHN1cHBvcnRzU3RhcnROYW1lKGFwcDogc3RyaW5nLCBwbGF0Zm9ybTogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIEluZGljYXRlcyBpZiBhbiBhcHAgb24gYSBnaXZlbiBwbGF0Zm9ybSBzdXBwb3J0cyBzcGVjaWZpY2F0aW9uIG9mIGxhdW5jaCBtb2RlLlxuICAgKiBOb3RlIHRoYXQgY3VycmVudGx5IG9ubHkgR29vZ2xlIE1hcHMgb24gQW5kcm9pZCBkb2VzLlxuICAgKiBAcGFyYW0gYXBwIHtzdHJpbmd9XG4gICAqIEBwYXJhbSBwbGF0Zm9ybSB7c3RyaW5nfVxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIEBDb3Jkb3ZhKHsgc3luYzogdHJ1ZSB9KVxuICBzdXBwb3J0c0xhdW5jaE1vZGUoYXBwOiBzdHJpbmcsIHBsYXRmb3JtOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIGRlc3RpbmF0aW9uIHtzdHJpbmcgfCBudW1iZXJbXX1cbiAgICogQHBhcmFtIG9wdGlvbnMge0xhdW5jaE5hdmlnYXRvck9wdGlvbnN9XG4gICAqL1xuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcbiAgdXNlclNlbGVjdChkZXN0aW5hdGlvbjogc3RyaW5nIHwgbnVtYmVyW10sIG9wdGlvbnM6IExhdW5jaE5hdmlnYXRvck9wdGlvbnMpOiB2b2lkIHt9XG59XG4iXX0=","map":null,"metadata":{},"sourceType":"module"}